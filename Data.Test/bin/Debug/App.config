<?xml version="1.0" encoding="utf-8" ?>
<configuration>

  <configSections>
    <sectionGroup name="common">
      <section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" />
    </sectionGroup>
    <sectionGroup name="spring">
      <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core"/>
      <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core"/>
      <section name="parsers" type="Spring.Context.Support.NamespaceParsersSectionHandler, Spring.Core"/>
    </sectionGroup>
  </configSections>
  <common>
    <logging>
      <factoryAdapter type="Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter, Common.Logging.Log4Net1211">
        <!-- choices are INLINE, FILE, FILE-WATCH, EXTERNAL-->
        <!-- otherwise BasicConfigurer.Configure is used   -->
        <!-- log4net configuration file is specified with key configFile-->
        <!--
        <arg key="configType" value="INLINE" />
        -->
        <arg key="configType" value="FILE-WATCH" />
        <arg key="configFile" value="~/log4net.xml" />
      </factoryAdapter>
    </logging>
  </common>
  <spring>
    <parsers>
      <parser type="Spring.Data.Config.DatabaseNamespaceParser, Spring.Data"/>
      <parser type="Spring.Transaction.Config.TxNamespaceParser, Spring.Data"/>
    </parsers>
    <context>
      <resource uri="config://spring/objects"/>
    </context>

    <objects 
      xmlns="http://www.springframework.net"
      xmlns:db="http://www.springframework.net/database"
      xmlns:tx="http://www.springframework.net/tx"
    >            
      <!--ADO.Net 測試範例 for 很多資料庫種類-->
      <!-- Database Configuration with transaction scope-->
      <!--以下是Spring產生資料庫提供者的設定檔-->
      <!--<db:provider id="dbProviderPG" provider="Npgsql-2.0" connectionString="Server=127.0.0.1;Port=5432;User Id=test;Password=test123;Database=db01;Enlist=true"/>-->
      <!--<db:provider id="dbProviderOracle" provider="OracleODP-11-2.0" connectionString="Data Source=(DESCRIPTION=(ADDRESS=(PROTOCAL=TCP)(HOST=icsvr03a)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=icash)));User Id=psvc;Password=psvc;Enlist=true;"/>-->
      <db:provider
        id="dbProviderSQLServer"
        provider="SqlServer-2.0"
        connectionString="Data Source=10.27.68.156;Initial Catalog=iSettle2;User ID=psvc;Password=psvc;Enlist=true"
      />
      <db:provider
        id="dbProviderSQLExpress"
        provider="SqlServer-2.0"
        connectionString="Server=.\SQLExpress;Database=Sample20141202;User ID=sa;Password=P@ssw0rd;Enlist=true;"
      />
      <!--選擇要使用的provider並給予一個別名-->
      <alias name="dbProviderSQLExpress" alias="dbProvider"/>

      <!--資料模型層 ADO.Net Template-->
      <!--定義物件id=adoTemplate,型別是Spring的(AdoTemplate)資料模型物件-->
      <object id="adoTemplate" type="Spring.Data.Generic.AdoTemplate, Spring.Data">
        <!--物件的DbProvider屬性參考(在上面)id=dbProvider-->
        <property name="DbProvider" ref="dbProvider"/>
        <!--物件的DataReaderWrapperType屬性值=Type.GetType(Spring.Data.Support.NullMappingDataReader)-->
        <!--(NullMappingDataReader實作IDataReaderWrapper存放IDataReader介面屬性並利用它來取得資料庫的數據)-->
        <property name="DataReaderWrapperType" value="Spring.Data.Support.NullMappingDataReader, Spring.Data"/>
      </object>
      
      <!--資料存取層Data access object-->
      <!--定義物件id=Customer,型別是CustomerDAO,沒有加tx(不做Transaction)-->
      <object id="customerDAO" type="Data.CustomerDAO, Data">
        <!--CustomerDAO物件的AdoTemplate屬性參考(在上面)id=adoTemplate-->
        <property name="AdoTemplate" ref="adoTemplate"/> 
        <!--多一個屬性叫做BindPrefix，拿來加入參數頭代號,因為Oracle參數頭使用的是;-->    
        <property name="BindPrefix" value="@"/>
      </object>

      <!--定義物件id=txCustomer,(在下面)外層物件id=txProxyTemplateNew,有加tx(要做Transaction)-->
      <object id="txCustomerDAO" parent="txProxyTemplate">
        <!--外層在包一個transaction物件,它的別名是txProxyTemplateNew,設定或宣告部份在很下面-->
        <property name="Target" ref="customerDAO" />
      </object>

      <!--定義物件id=orderDAO,型別是OrderDAO-->
      <object id="orderDAO" type="Data.OrderDAO, Data">
        <property name="AdoTemplate" ref="adoTemplate" />
        <property name="BindPrefix" value="@" />
      </object>

      <!--商業邏輯層business layer-->
      <!--定義物件id="customerManager",型別是CustomerManager-->
      <object id="customerManager" type="Business.CustomerManager, Business">
        <!--設定CustomerDAO屬性參考(在上面)id=customerDAO的物件-->
        <property name="CustomerDAO" ref="customerDAO" />
      </object>

      <!--定義物件id=txCustomerManager(要做Transaction),-->
      <!--定義此物件id並設定其外層在包一層物件id叫txProxyTemplate-->
      <object id="txCustomerManager" parent="txProxyTemplate">
        <!--<property name="Target" ref="customerManager" />-->
        <!--屬性型別是Target-->
        <property name="Target">
          <!--屬性型別是CustomerManager-->
          <object type="Business.CustomerManager, Business">
            <!--物件的屬性名稱為CustomerDAO,參考(在上面)物件id=txCustomerDAO-->
            <property name="CustomerDAO" ref="txCustomerDAO" />
          </object>
        </property>
      </object>

      <!--定義物件id 設定型別OrderManager-->
      <object id="orderManager" type="Business.OrderManager, Business">
        <!--設定OrderDAO屬性參考(在上面)id=orderDAO的物件-->
        <property name="OrderDAO" ref="orderDAO" />
        <!--設定CustomerManager屬性參考(在上面)id=customerManager的物件-->
        <property name="CustomerManager" ref="customerManager" />
      </object>

      <object id="txOrderManager" parent="txProxyTemplate">
        <property name="Target">
          <object type="Business.OrderManager, Business">
            <property name="OrderDAO" ref="orderDAO" />
            <property name="CustomerManager" ref="txCustomerManager" />
          </object>
        </property>
      </object>

      <!--Transaction Manager(開始設定Transaction)-->
      <!-- local ADO.NET based transactions -->
      <!--定義物件id=transactionManagerLOC,型別是Spring.Data.Core.AdoPlatformTransactionManager-->
      <object id="transactionManagerLOC" type="Spring.Data.Core.AdoPlatformTransactionManager, Spring.Data">
        <!--物件的DbProvider屬性(在上面)參考id=dbProvider-->
        <property name="DbProvider" ref="dbProvider"/>
      </object>

      <!--分散式交易(即可分兩地DB同時做Transaction[要開啟window的DTC])-->
      <!--<object id="transactionManagerDIST" type="Spring.Data.Core.TxScopeTransactionManager, Spring.Data"></object>-->

      <!--<object id="transactionManagerES"
          type="Spring.Data.Core.ServiceDomainPlatformTransactionManager, Spring.Data">
      </object>-->

      <alias name="transactionManagerLOC" alias="transactionManager"/>

      <!--第一種TransactionOption(設定每個方法的交易範圍都是PROPAGATION_REQUIRED)-->
      <object id="txProxyTemplate" abstract="true" type="Spring.Transaction.Interceptor.TransactionProxyFactoryObject, Spring.Data">
        <!--設定PlatformTransactionManager屬性參考id=transactionManager(即設定交易平台)-->
        <property name="PlatformTransactionManager" ref="transactionManager"/>
        <!--設定Transaction屬性集合-->
        <property name="TransactionAttributes">
          <name-values>
            <!--將此key與value加入到Transaction屬性集合中-->
            <!--設定IsolationLevel為ReadCommited-->
            <!--REQUIRED=>如果已經存在環境交易，則會使用環境交易， 否則會在進入範圍前建立新的交易的-->
            <add key="Insert*" value="PROPAGATION_REQUIRED,ISOLATION_READCOMMITTED" />
            <add key="Update*" value="PROPAGATION_REQUIRED" />
            <add key="Delete*" value="PROPAGATION_REQUIRED" />
            <add key="Find*" value="PROPAGATION_REQUIRED,readOnly" />
            <!--readOnly處理速度會比較快-->
            <add key="List*" value="PROPAGATION_REQUIRED,readOnly" />
            <add key="Exist*" value="PROPAGATION_REQUIRED,readOnly" />
          </name-values>
        </property>
      </object>

      <!--第二種TransactionOption(設定Insert*方法的交易範圍是PROPAGATION_REQUIRES_NEW)(即每次Insert方法都建立一個獨立的transaction)-->
      <object id="txProxyTemplateNew" abstract="true" type="Spring.Transaction.Interceptor.TransactionProxyFactoryObject, Spring.Data">
        <property name="PlatformTransactionManager" ref="transactionManager" />
        <property name="TransactionAttributes">
          <name-values>
            <!--Insert*方法的交易範圍變成NEW即強制建立一個Transaction-->
            <add key="Insert*" value="PROPAGATION_REQUIRES_NEW,ISOLATION_READCOMMITTED" />
            <add key="Update*" value="PROPAGATION_REQUIRED" />
            <add key="Delete*" value="PROPAGATION_REQUIRED" />
            <add key="Find*" value="PROPAGATION_REQUIRED,readOnly" />
            <add key="List*" value="PROPAGATION_REQUIRED,readOnly" />
            <add key="Exist*" value="PROPAGATION_REQUIRED,readOnly" />
          </name-values>
        </property>
      </object>
    </objects>
  </spring>
  <startup>
    <supportedRuntime version="v4.5" sku=".NETFramework,Version=v4.5" />
  </startup>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Common.Logging" publicKeyToken="AF08829B84F0328E" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-65535.65535.65535.65535" newVersion="2.1.2.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="log4net" publicKeyToken="669e0ddf0bb1aa2a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.2.13.0" newVersion="1.2.13.0" />
      </dependentAssembly>
      <!--<dependentAssembly>
        <assemblyIdentity name="Common.Logging" publicKeyToken="af08829b84f0328e" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.1.2.0" newVersion="2.1.2.0" />
      </dependentAssembly>-->
      <dependentAssembly>
        <assemblyIdentity name="Spring.Aop" publicKeyToken="65e474d141e25e07" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.3.2.40943" newVersion="1.3.2.40943" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Spring.Core" publicKeyToken="65e474d141e25e07" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.3.2.40943" newVersion="1.3.2.40943" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>
